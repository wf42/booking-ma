var request = require('request');
var configuration = require('rekuire')('web.config').appSetting;
var responseDictionary = require('response-dictionary');

exports.createPaymentPage = function(createPayPageRequest, callBack) {

  var formData = {
    merchant_email: configuration.paytabs.merchant_email,
    secret_key: configuration.paytabs.secret_key,
    site_url: configuration.paytabs.site_url,
    return_url: configuration.paytabs.return_url + createPayPageRequest.reference_no,
    title: createPayPageRequest.title,
    cc_first_name: createPayPageRequest.cc_first_name,
    cc_last_name: createPayPageRequest.cc_last_name,
    cc_phone_number: createPayPageRequest.cc_phone_number,
    phone_number: createPayPageRequest.phone_number,
    email: createPayPageRequest.email,
    products_per_title: createPayPageRequest.products_per_title,
    unit_price: createPayPageRequest.unit_price,
    quantity: createPayPageRequest.quantity,
    other_charges: createPayPageRequest.other_charges,
    amount: createPayPageRequest.amount,
    discount: createPayPageRequest.discount,
    currency: createPayPageRequest.currency,
    reference_no: createPayPageRequest.reference_no,
    ip_customer: createPayPageRequest.ip_customer,
    ip_merchant: createPayPageRequest.ip_merchant,
    billing_address: createPayPageRequest.billing_address,
    state: createPayPageRequest.state,
    city: createPayPageRequest.city,
    postal_code: createPayPageRequest.billing_address,
    country: createPayPageRequest.country,
    shipping_first_name: createPayPageRequest.shipping_first_name,
    shipping_last_name: createPayPageRequest.shipping_last_name,
    address_shipping: createPayPageRequest.address_shipping,
    city_shipping: createPayPageRequest.city_shipping,
    state_shipping: createPayPageRequest.state_shipping,
    postal_code_shipping: createPayPageRequest.postal_code_shipping,
    country_shipping: createPayPageRequest.country_shipping,
    msg_lang: createPayPageRequest.msg_lang,
    cms_with_version: createPayPageRequest.cms_with_version
  };

  var paytabsUrl = configuration.paytabs.createPayPageApiURL;
  if (createPayPageRequest.hasOwnProperty('olp_id') === true) {
    formData.olp_id = createPayPageRequest.olp_id;
    paytabsUrl = configuration.paytabs.createSadadPayPageApiURL;
  }

  request.post({
    url: paytabsUrl,
    form: formData
  }, function(error, httpResponse, body) {
    if (error) {
      return callBack(error);
    }

    var response = JSON.parse(body);
    if (response.response_code === "4012" || response.response_code === "4025") {
      callBack(null, response);
    } else {
      callBack(responseDictionary.getAsJson(5873, response), null);
    }
  });
};

exports.verifyPayment = function(referenceNumber, callBack) {
  var formData = {
    merchant_email: configuration.paytabs.merchant_email,
    secret_key: configuration.paytabs.secret_key,
    payment_reference: referenceNumber
  };

  request.post({
    url: configuration.paytabs.verifyPaymentApiURL,
    form: formData
  }, function(error, httpResponse, body) {
    if (error) {
      return callBack(error);
    }

    var response = JSON.parse(body);
    if (response.response_code === "100") {
      callBack(null, response);
    } else {
      callBack(responseDictionary.getAsJson(1071, response), null);
    }
  });
};
